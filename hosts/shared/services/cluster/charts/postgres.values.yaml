# yaml-language-server: $schema=https://raw.githubusercontent.com/bitnami/charts/refs/tags/postgresql/16.7.15/bitnami/valkey/values.schema.json

image:
  registry: ghcr.io
  repository: danielramosacosta/bitnami-postgresql-vectorchord-pgvectors
  tag: main-65311a2

global:
  security:
    allowInsecureImages: true

auth:
  postgresPassword: mysupersecurepassword

postgresqlSharedPreloadLibraries: "pgaudit,vchord"

primary:
  persistence:
    enabled: true
    size: 20Gi
    storageClass: local-path
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
  extraEnvVars:
    - name: DATABASE_USERS
      value: "immich,authelia"
    - name: USER_PASSWORD_IMMICH
      value: "c0aec791-f4a4-4873-aed7-1e343daee907"
    - name: USER_PASSWORD_AUTHELIA
      value: "d9a14e19-2495-4598-820e-21a50c0f5f10"
  initdb:
    scripts:
      01_create_users.sh: |
        #!/usr/bin/env bash
        set -euo pipefail

        echo "üèóÔ∏è  Configurando bases multi-tenant‚Ä¶"

        # üîß Helper: deja solo al owner con CONNECT
        grant_connect_exclusive() {
          local db="$1"   # nombre de la base
          local owner="$2"
          PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "postgres" <<SQL
            REVOKE CONNECT ON DATABASE "$db" FROM PUBLIC;
            GRANT  CONNECT ON DATABASE "$db" TO "$owner";
        SQL
        }

        # üîß Helper: instala extensiones necesarias
        create_extensions() {
          local db="$1"
          PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "postgres" --dbname "$db" <<'SQL'
            CREATE EXTENSION IF NOT EXISTS vector;
            CREATE EXTENSION IF NOT EXISTS vchord;
            CREATE EXTENSION IF NOT EXISTS cube;
            CREATE EXTENSION IF NOT EXISTS earthdistance;
        SQL
        }

        # 1Ô∏è‚É£ Blindamos las bases ‚Äúp√∫blicas‚Äù
        for sysdb in postgres template0 template1; do
          grant_connect_exclusive "$sysdb" "postgres"
        done

        # 2Ô∏è‚É£ Recorremos la lista de usuaries
        IFS=',' read -ra USER_ARRAY <<< "${DATABASE_USERS:-}"
        for raw_name in "${USER_ARRAY[@]}"; do
          name="$(echo "$raw_name" | xargs)"
          [[ -z "$name" ]] && continue

          up_name="$(echo "$name" | tr '[:lower:]' '[:upper:]')"
          pw_var="USER_PASSWORD_${up_name}"
          pw="${!pw_var:-}"

          [[ -z "$pw" ]] && { echo "‚ö†Ô∏è  Falta la contrase√±a para '$name' ( \$${pw_var} ). Se omite."; continue; }

          echo "üîê Creando role y BBDD para '$name'‚Ä¶"

          # Role con LOGIN
          PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "postgres" <<SQL
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '$name') THEN
                CREATE ROLE "$name" LOGIN PASSWORD '$pw';
              END IF;
            END
            \$\$;
        SQL

          # Base dedicada
          PGPASSWORD="$POSTGRES_PASSWORD" psql -v ON_ERROR_STOP=1 --username "postgres" \
              -c "CREATE DATABASE \"$name\" OWNER \"$name\" TEMPLATE template0;" \
              || true

          # Solo su due√±e puede entrar
          grant_connect_exclusive "$name" "$name"

          # Extensiones listas para usarse
          create_extensions "$name"
        done

        echo "‚úÖ  Bases blindadas y extensiones preparadas."


readReplicas:
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m

volumePermissions:
  enabled: true
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m
