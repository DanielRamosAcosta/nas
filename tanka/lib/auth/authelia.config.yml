# yaml-language-server: $schema=https://www.authelia.com/schemas/v4.39/json-schema/configuration.json

authentication_backend:
  password_reset:
    disable: true
  file:
    path: /config/users_database.yml

storage:
  encryption_key: '{{ env `AUTHELIA_STORAGE_ENCRYPTION_KEY` }}'
  postgres:
    address: 'tcp://postgres.databases.svc.cluster.local:5432'
    username: authelia
    password: '{{ env `AUTHELIA_STORAGE_POSTGRES_PASSWORD` }}'
    database: authelia

access_control:
  default_policy: two_factor

session:
  secret: '{{ env `AUTHELIA_SESSION_SECRET` }}'
  cookies:
    - domain: danielramos.me
      authelia_url: 'https://auth.danielramos.me'
      default_redirection_url: 'https://photos.danielramos.me'

notifier:
  smtp:
    address: 'smtp://smtp.eu.mailgun.org:587'
    username: 'nas@mail.danielramos.me'
    password: '{{ env `AUTHELIA_NOTIFIER_SMTP_PASSWORD` }}'
    sender: "NAS <nas@mail.danielramos.me>"
    subject: "[NAS] {title}"

definitions:
  user_attributes:
    sftpgo_role:
      expression: '"admins" in groups ? "admin" : "user"'

identity_providers:
  oidc:
    jwks:
      - key_id: main
        algorithm: RS256
        key: {{ secret "/config/secrets/oidc/jwks/rsa.2048.key" | mindent 10 "|" | msquote }}

    claims_policies:
      grafana:
        id_token: ['email', 'name', 'groups', 'preferred_username']

      sftpgo:
        id_token: ['username', 'sftpgo_role']
        custom_claims:
          username:
            attribute: username
          sftpgo_role:
            attribute: sftpgo_role

    scopes:
      sftpgo:
        claims:
          - username
          - sftpgo_role
    
    clients:
      - client_id: '{{ env `IDENTITY_PROVIDERS_OIDC_CLIENTS_IMMICH_CLIENT_ID` }}'
        client_name: Immich
        client_secret: '{{ env `IDENTITY_PROVIDERS_OIDC_CLIENTS_IMMICH_CLIENT_SECRET_DIGEST` }}'
        public: false
        authorization_policy: two_factor
        require_pkce: false
        pkce_challenge_method: ''
        redirect_uris:
          - 'https://photos.danielramos.me/auth/login'
          - 'https://photos.danielramos.me/user-settings'
          - 'app.immich:///oauth-callback'
        scopes:
          - openid
          - profile
          - email
        response_types:
          - code
        grant_types:
          - authorization_code
        access_token_signed_response_alg: none
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: client_secret_post
      
      - client_id: '{{ env `IDENTITY_PROVIDERS_OIDC_CLIENTS_SFTPGO_CLIENT_ID` }}'
        client_name: SFTPGo
        client_secret: '{{ env `IDENTITY_PROVIDERS_OIDC_CLIENTS_SFTPGO_CLIENT_SECRET_DIGEST` }}'
        public: false
        authorization_policy: two_factor
        claims_policy: sftpgo
        require_pkce: false
        pkce_challenge_method: ''
        redirect_uris:
          - 'https://cloud.danielramos.me/web/oidc/redirect'
        scopes:
          - openid
          - profile
          - email
          - sftpgo
        response_types:
          - code
        grant_types:
          - authorization_code
        access_token_signed_response_alg: none
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: client_secret_post

      - client_id: '{{ env `IDENTITY_PROVIDERS_OIDC_CLIENTS_GRAFANA_CLIENT_ID` }}'
        client_name: Grafana
        client_secret: '{{ env `IDENTITY_PROVIDERS_OIDC_CLIENTS_GRAFANA_CLIENT_SECRET_DIGEST` }}'
        public: false
        authorization_policy: two_factor
        claims_policy: grafana
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'https://grafana.danielramos.me/login/generic_oauth'
        scopes:
          - openid
          - profile
          - email
          - groups
        response_types:
          - code
        grant_types:
          - authorization_code
        access_token_signed_response_alg: none
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: client_secret_basic
